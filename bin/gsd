#!/usr/bin/env ruby

# Copyright (c) 2015, Sean Malloy
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software without
#    specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

require 'csv'
require 'gsd'
require 'json'
require 'resolv'
require 'table_print'
require 'thor'

def build_hostname_list(unique, hosts)
  hostnames = []
  if $stdin.tty?
    # reading hostnames from command line
    hosts.each do |hostname|
      hostnames.push(ServerData.to_hostname(hostname))
    end
  else
    # reading hostnames from a pipe
    STDIN.each do |hostname|
      if hostname != "\n"
        hostname.chomp!
        hostnames.push(ServerData.to_hostname(hostname))
      end
    end
  end

  # remove duplicate hostnames
  if unique
    hostnames.uniq!
  end
  hostnames
end

class GetServerDataCli < Thor
  class_option :format, :default => "text", :type => :string, :aliases => '-f',
    :desc => "Use FORMAT as the output format. FORMAT can be one of csv, json, or text"
  class_option :sort, :default => true, :type => :boolean, :aliases => '-s',
    :desc => "Sort output by hostname"
  class_option :unique, :default => true, :type => :boolean, :aliases => '-u',
    :desc => "Remove duplicate hostnames"

  def initialize(a, b, c)
    super
    @results = []

    # validate --format option
    if options[:format] != "csv" and options[:format] != "json" and options[:format] != "text"
      puts "Invalid option: \"--format #{options[:format]}\""
      puts ""
      puts "Valid parameters for --format are: \"csv\" \"json\" \"text\""
      exit 1
    end
  end

  desc "dns [OPTION...] HOSTNAME...", "Get information about hosts from DNS"
  long_desc <<-LONGDESC
    Gets information from DNS for one or more hosts. Collects the IP address
    and DNS record type.

    $ gsd dns www.google.com
    \x5$ gsd dns www.openbsd.org www.google.com
  LONGDESC
  def dns(*args)
    hostnames = build_hostname_list(options[:unique], args)
    threads = []
    hostnames.each do |hostname|
      threads << Thread.new {
        server = ServerData.new(hostname)
        @results << { :hostname => server.hostname, :ip => server.get_ip, :dns => server.get_dns_type }
      }
    end
    threads.each { |thr| thr.join }

    # display results
    if options[:sort]
      @results.sort! { |x,y| x[:hostname] <=> y[:hostname] }
    end
    self.print_results(options[:format])
  end

  desc "ping [OPTION...] HOSTNAME...", "Get information about hosts from ICMP(ping)"
  long_desc <<-LONGDESC
    Gets information from ICMP(ping) for one or more hosts. Collects the IP address
    and ICMP pings the hosts.

    $ gsd ping www.google.com
    \x5$ gsd ping --timeout 3 www.google.com
    \x5$ gsd ping www.openbsd.org www.google.com
  LONGDESC
  option :timeout, :default => 1, :type => :numeric, :aliases => '-t', :desc => "Set ICMP tiemout to N seconds"
  def ping(*args)
    hostnames = build_hostname_list(options[:unique], args)
    threads = []
    hostnames.each do |hostname|
      threads << Thread.new {
        server = ServerData.new(hostname)
        @results << { :hostname => server.hostname, :ip => server.get_ip, :ping => server.ping }
      }
    end
    threads.each { |thr| thr.join }

    # display results
    if options[:sort]
      @results.sort! { |x,y| x[:hostname] <=> y[:hostname] }
    end
    self.print_results(options[:format])
  end

  desc "tcp [OPTION...] HOSTNAME...", "Get information about a TCP port for hosts"
  long_desc <<-LONGDESC
    Tests TCP port connection to one or more hosts. Collects the IP address
    and tests TCP port connection to the hosts.

    $ gsd tcp www.google.com
    \x5$ gsd tcp --timeout 3 www.google.com
    \x5$ gsd tcp --port 21 www.openbsd.org
  LONGDESC
  option :port, :default => 22, :type => :numeric, :aliases => '-p', :desc => "TCP port to test"
  option :timeout, :default => 1, :type => :numeric, :aliases => '-t', :desc => "Set TCP timeout to N seconds"
  def tcp(*args)
    hostnames = build_hostname_list(options[:unique], args)
    threads = []
    hostnames.each do |hostname|
      threads << Thread.new {
        server = ServerData.new(hostname, options[:port])
        @results << { :hostname => server.hostname, :ip => server.get_ip, :port => options[:port], :port_result => server.get_port_status }
      }
    end
    threads.each { |thr| thr.join }

    # display results
    if options[:sort]
      @results.sort! { |x,y| x[:hostname] <=> y[:hostname] }
    end
    self.print_results(options[:format])
  end

  protected
  def print_results(format)
    if !@results.empty?
      if format == "csv"
        puts @results[0].keys.to_csv
        @results.each do |data|
          puts data.values.to_csv
        end
      elsif format == "json"
        puts @results.to_json
      elsif format == "text"
        tp @results
      end
    end
  end
end

GetServerDataCli.start(ARGV)

