#!/usr/bin/env ruby

# Copyright (c) 2015, Sean Malloy
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software without
#    specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

require 'gsd'
require 'optparse'
require 'ostruct'
require 'resolv'

# Parse command line options
options = OpenStruct.new
options.mode    = 'scan'
options.port    = 22
options.sort    = true
options.timeout = 1
options.unique  = true
OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options]"

  opts.on("-m", "--mode MODE", String, "Select mode (scan, dns)") do |mode|
    options.mode = mode
  end

  opts.on("-p", "--port PORT", Integer, "TCP port") do |port|
    options.port = port
  end

  opts.on("-s", "--[no-]sort", "Sort output") do |s|
    options.sort = s
  end

  opts.on("-t", "--timeout SECONDS", Integer, "TCP connection timeout") do |seconds|
    options.seconds = seconds
  end

  opts.on("-u", "--[no-]unique", "Remove duplicate hostnames") do |u|
    options.unique = u
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end.parse!

# get list of servers
servers = []
if $stdin.tty?
  # reading hostnames from command line
  ARGV.each do |hostname|
    if hostname =~ /^\d+\.\d+\.\d+.\d+$/
      begin
        servers.push(ServerData.new(Resolv.getname(hostname), options.port))
      rescue Resolv::ResolvError
        servers.push(ServerData,new(hostname, options.port))
      end
    else
      servers.push(ServerData.new(hostname, options.port))
    end
  end
else
  # reading hostnames from a pipe
  $stdin.each do |hostname|
    if hostname != "\n"
      hostname.chomp!
      if hostname =~ /^\d+\.\d+\.\d+.\d+$/
        begin
          servers.push(ServerData.new(Resolv.getname(hostname, options.port)))
        rescue Resolv::ResolvError
          servers.push(ServerData.new(hostname, options.port))
        end
      else
        servers.push(ServerData.new(hostname))
      end
    end
  end
end

# remove duplicate hostnames
if options.unique
  servers.uniq! { |x| x.hostname }
end

# get ip addresses
servers.each do |x|
  x.ip!
end

# collect server data
server_data = []
if options.mode == 'scan'
  # port scan mode
  servers.each do |x|
    x.port_status!(options.timeout)
  end
elsif options.mode == 'dns'
  # dns query mode
  servers.each do |x|
    x.dns_record_type!
  end
end

if options.sort
  servers.sort! { |a, b| a.hostname <=> b.hostname }
end

# print server data
hostname_max_length = servers.collect { |x| x.hostname.length }.sort.last
ip_max_length       = servers.collect { |x| x.ip.length }.sort.last
servers.each do |server|
  puts "%-#{hostname_max_length}s %-#{ip_max_length}s %s %s" % [ server.hostname, server.ip, server.port_status, server.dns_record_type ]
end

