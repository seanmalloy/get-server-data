#!/usr/bin/env ruby

# Copyright (c) 2015, Sean Malloy
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software without
#    specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

require 'gsd'
require 'resolv'
require 'thor'

# convert input into a hostname
def to_hostname(input)
  if input =~ /^\d+\.\d+\.\d+.\d+$/
    begin
      return Resolv.getname(input)
    rescue Resolv::ResolvError
      return input
    end
  else
    return input
  end
end

def build_hostname_list(sort, unique, hosts)
  hostnames = []
  if $stdin.tty?
    # reading hostnames from command line
    hosts.each do |hostname|
      hostnames.push(to_hostname(hostname))
    end
  else
    # reading hostnames from a pipe
    STDIN.each do |hostname|
      if hostname != "\n"
        hostname.chomp!
        hostnames.push(to_hostname(hostname))
      end
    end
  end

  # remove duplicate hostnames
  if unique
    hostnames.uniq!
  end

  # sort by hostname
  if sort
    hostnames.sort!
  end
  return hostnames
end

class GetServerDataCli < Thor
  class_option :sort, :default => true, :type => :boolean, :aliases => '-s'
  class_option :unique, :default => true, :type => :boolean, :aliases => '-u'

  desc "dns SERVER", "get info from dns"
  def dns(*args)
    hostnames = build_hostname_list(options[:sort], options[:unique], args)

    servers = []
    hostnames.each do |hostname|
      servers.push(ServerData.new(hostname))
    end

    servers.each do |server|
      server.ip!
      server.dns_record_type!
    end

    # display results
    hostname_max_length = servers.collect { |x| x.hostname.length }.sort.last
    ip_max_length       = servers.collect { |x| x.ip.to_s.length }.sort.last
    servers.each do |server|
      puts "%-#{hostname_max_length}s %-#{ip_max_length}s %s" % [ server.hostname, server.ip, server.dns_record_type ]
    end
  end

  desc "ping SERVER", "ICMP ping a server"
  option :timeout, :default => 1, :type => :numeric, :aliases => '-t'
  def ping(*args)
    hostnames = build_hostname_list(options[:sort], options[:unique], args)

    servers = []
    hostnames.each do |hostname|
      servers.push(ServerData.new(hostname))
    end

    servers.each do |server|
      server.ip!
      server.ping_status!
    end

    # display results
    hostname_max_length = servers.collect { |x| x.hostname.length }.sort.last
    ip_max_length       = servers.collect { |x| x.ip.to_s.length }.sort.last
    servers.each do |server|
      puts "%-#{hostname_max_length}s %-#{ip_max_length}s %s" % [ server.hostname, server.ip, server.ping_status ]
    end
  end

  desc "tcp SERVER", "get info from tcp port scan"
  option :port, :default => 22, :type => :numeric, :aliases => '-p'
  option :timeout, :default => 1, :type => :numeric, :aliases => '-t'
  def tcp(*args)
    hostnames = build_hostname_list(options[:sort], options[:unique], args)

    servers = []
    hostnames.each do |hostname|
      servers.push(ServerData.new(hostname, options[:port]))
    end

    servers.each do |server|
      server.ip!
      server.port_status!
    end

    # display results
    hostname_max_length = servers.collect { |x| x.hostname.length }.sort.last
    ip_max_length       = servers.collect { |x| x.ip.to_s.length }.sort.last
    servers.each do |server|
      puts "%-#{hostname_max_length}s %-#{ip_max_length}s %s" % [ server.hostname, server.ip, server.port_status ]
    end
  end
end

GetServerDataCli.start(ARGV)

