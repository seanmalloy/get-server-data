#!/usr/bin/env ruby

# Version 1.0
#
# TCP port connectivity                                   DONE
# look up IP addresses from DNS                           DONE
# read list of hosts from the command line                DONE
# output info to standard output                          TODO: needs to pretty print aligned columns
# command line options for sorting and not sorting output TODO

# Version 2.0
#
# ping (not possbile with 1.8.7)
# ability to lookup different types of data from DNS
# MAC addresses
# allow filtering dups from input
# read from pipes
# read from a shell redirect(<)
# parallel execution (fork child worker procs)

# Version 3.0
#
# use SQLite database(in memory / on disk)
# ouput csv file
# output json
# output yaml

# Version 4.0
#
# HTTP data
# allow for plugins
# any deps should be rolled into a single file(like ack)

require 'optparse'
require 'ostruct'
require 'socket'
require 'timeout'
require 'resolv'

def is_port_open?(ip, port, timeout)
  begin
    Timeout::timeout(timeout) do
      begin
        s = TCPSocket.new(ip, port)
        s.close
        return true
      rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH
        return false
      end
    end
  rescue Timeout::Error
  end
  return false
end 

options = OpenStruct.new
options.port    = 22
options.timeout = 1
OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options]"

  opts.on("-p", "--port PORT", Integer, "TCP port") do |port|
    options.port = port
  end

  opts.on("-t", "--timeout SECONDS", Integer, "TCP connection timeout") do |seconds|
    options.seconds = seconds
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end.parse!

servers = []
hostname_max_length = 0
ip_max_length = 0
ARGV.each do |hostname|
  ip = Resolv.getaddress(hostname)
  if hostname.length > hostname_max_length
    hostname_max_length = hostname.length
  end

  if ip.length > ip_max_length
    ip_max_length = ip.length
  end
  data = { :hostname => hostname, :ip => ip, :status => 'FAIL' }
  servers.push(data)
  if is_port_open?(hostname, options.port, options.timeout)
    servers[-1][:status] = 'PASS'
  end
end

# TODO: format output with "format strings" to align columns
servers.each do |server|
  puts "#{server[:hostname]} #{server[:ip]} #{server[:status]}"
end


# DNS stuff
# http://ruby-doc.org/stdlib-1.8.7/libdoc/resolv/rdoc/Resolv.html

# Parse Command Line
# http://www.ruby-doc.org/stdlib-1.8.7/libdoc/optparse/rdoc/OptionParser.html

# Sockets
# http://ruby-doc.org/stdlib-1.8.7/libdoc/socket/rdoc/Socket.html
# http://ruby-doc.org/stdlib-1.8.7/libdoc/socket/rdoc/TCPSocket.html

