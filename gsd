#!/usr/bin/env ruby

# Copyright (c) 2015, Sean Malloy
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software without
#    specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

require 'optparse'
require 'ostruct'
require 'socket'
require 'timeout'
require 'resolv'

def is_port_open?(ip, port, timeout)
  begin
    Timeout::timeout(timeout) do
      begin
        s = TCPSocket.new(ip, port)
        s.close
        return true
      rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH,  SocketError
        return false
      end
    end
  rescue Timeout::Error
  end
  return false
end 

# Parse command line options
options = OpenStruct.new
options.mode    = 'scan'
options.port    = 22
options.sort    = true
options.timeout = 1
options.unique  = true
OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options]"

  opts.on("-m", "--mode MODE", String, "Select mode (scan, dns)") do |mode|
    options.mode = mode
  end

  opts.on("-p", "--port PORT", Integer, "TCP port") do |port|
    options.port = port
  end

  opts.on("-s", "--[no-]sort", "Sort output") do |s|
    options.sort = s
  end

  opts.on("-t", "--timeout SECONDS", Integer, "TCP connection timeout") do |seconds|
    options.seconds = seconds
  end

  opts.on("-u", "--[no-]unique", "Remove duplicate hostnames") do |u|
    options.unique = u
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end.parse!

# get list of servers
servers = []
if $stdin.tty?
  # reading hostnames from command line
  ARGV.each do |hostname|
    if hostname =~ /^\d+\.\d+\.\d+.\d+$/
      begin
        servers.push(Resolv.getname(hostname))
      rescue Resolv::ResolvError
        servers.push(hostname)
      end
    else
      servers.push(hostname)
    end
  end
else
  # reading hostnames from a pipe
  $stdin.each do |hostname|
    if hostname != "\n"
      hostname.chomp!
      if hostname =~ /^\d+\.\d+\.\d+.\d+$/
        begin
          servers.push(Resolv.getname(hostname))
        rescue Resolv::ResolvError
          servers.push(hostname)
        end
      else
        servers.push(hostname)
      end
    end
  end
end

# remove duplicate hostnames
if options.unique
  servers.uniq!
end

# collect server data
server_data = []
ip_max_length = 0
hostname_max_length = 0
if options.mode == 'scan'
  # port scan mode
  servers.each do |hostname|
    begin
      ip = Resolv.getaddress(hostname)
    rescue Resolv::ResolvError
      ip = "NOT_IN_DNS"
    end
    if hostname.length > hostname_max_length
      hostname_max_length = hostname.length
    end

    if ip.length > ip_max_length
      ip_max_length = ip.length
    end

    host_data = { :hostname => hostname, :ip => ip, :status => 'FAIL' }
    server_data.push(host_data)
    if is_port_open?(hostname, options.port, options.timeout)
      server_data[-1][:status] = 'PASS'
    end
  end
elsif options.mode == 'dns'
  # dns query mode
  resolver = Resolv::DNS.new
  servers.each do |hostname|
    begin
      ip = Resolv.getaddress(hostname)
    rescue Resolv::ResolvError
      ip = "NOT_IN_DNS"
    end
    if hostname.length > hostname_max_length
      hostname_max_length = hostname.length
    end

    if ip.length > ip_max_length
      ip_max_length = ip.length
    end

    dns_record_type = nil
    begin
      resolver.getresource(hostname, Resolv::DNS::Resource::IN::CNAME)
    rescue Resolv::ResolvError
      # do nothing
    else
      dns_record_type = 'CNAME'
    end

    if dns_record_type.nil?
      begin
        resolver.getresource(hostname, Resolv::DNS::Resource::IN::A)
      rescue Resolv::ResolvError
        # do nothing
      else
        dns_record_type = 'A'
      end
    end

    host_data = { :hostname => hostname, :ip => ip, :dns => dns_record_type }
    server_data.push(host_data)
  end
end

if options.sort
  server_data.sort! { |a, b| a[:hostname] <=> b[:hostname] }
end

# print server data
server_data.each do |server|
  puts "%-#{hostname_max_length}s %-#{ip_max_length}s %s %s" % [ server[:hostname], server[:ip], server[:status], server[:dns] ]
end

